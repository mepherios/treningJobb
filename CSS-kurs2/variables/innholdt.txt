Variables

Imagine that you have just finished the final version of a large client website. 
Everything looks great and you are happy with its layout and design. 
But when you show your client the finished site they ask you to change one of the main background colors to something with more pop. 
That doesn’t seem like too big of a task. 
You just need to find a new color and replace all the old background color values with the new one, 
except the old color is used a lot so it becomes extremely time-consuming. 
CSS actually has a solution for these types of issues when they arise—variables.

In programming languages, variables are symbolic names, or containers, for storing values/information. 
We can think of them in a similar manner to the way that “x” and “y” are often used as placeholders for values in mathematics. 
Variables allow information to be maintained and referenced in multiple locations. They also make it easier to read and understand code. 
Especially when it’s someone else’s!

CSS has variables in its own style—more specifically, they are called Custom Properties. 
These variables can be used to hold specific values that can be reused throughout the stylesheet. 
Variables mitigate the need to repeat values and make values easier to understand what they are used for. 
For instance, --main-red-color is much easier to understand than #7f3f3f.
By the end of this lesson, you will be able to use CSS variables to make your programs more organized, efficient, and legible!



definering og bruk av variabel.

h1 {
  --main-background-color: #DADECC;
  background-color: var(--main-background-color);
}


Ideel bruksmetode for custom farge. 

html {
  --custom-purple: #FF64ED;
  --main-color: var(--custom-purple);
}
 
body {
  background: var(--main-color);
}


Interesant interaksjon. 
Her er custom purple referert til som main color, så når var main-color blir brukt så tar den fra html custom purple, ikke fra body.


html {
  --custom-purple: #FF64ED;
  --main-color: var(--custom-purple);
}


body {
  /*Trying to override the --custom-purple variable defined in the html selector rules*/
  --custom-purple: #FFFFF;
  background: var(--main-color);
}


:root {}
brukes for å definere global scope variabler.


local vs global scope gir muligheten for å forandre en global variabel lokalt hvis man vil.

fallback values er når en verdi er gitt feil variabel, eksempell tekst størrelse er gitt en farge.
Dette er en sekundærverdi som blir gitt som alternativ som nummer en.
NB max 2 argumenter.
NB kan sette fallback i fallbacken. 

body {
  background: var(--main-background-color, #F3F3F3);
}

fallback av fallback

body {
/* --favorite-orange if --main-color is invalid and red if --favorite-orange is invalid */
font-color: var(--main-color, var(--favorite-orange, red));

Fallback av fallback av fallback.

body {
/* --favorite-orange if --main-color is invalid and red if --favorite-orange is invalid and --favorite-yellow if --favorite-orange is invalid */
font-color: var(--main-color, var(--favorite-orange, var(--favorite-yellow, yellow)));
}

Når backup blir lagt, bygg en uendelighetsstige. aka alle vars, er var endelige.

.artist:nth-child(even) {
  background: var(--group-two-background-color,var(--backup-color-1,var(--backup-color-2)));
}

kan også bruke :root variabler med media query, som er meget brukbart.
